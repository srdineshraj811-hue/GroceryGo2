{"file_contents":{"design_guidelines.md":{"content":"# Grocery Delivery App Design Guidelines\n\n## Design Approach\n**Design System:** Material Design 3 principles adapted for mobile-first grocery delivery platform\n**Rationale:** This utility-focused, multi-role application requires consistent patterns, clear information hierarchy, and proven mobile UX patterns. Material Design provides the necessary component library while allowing customization for the grocery retail context.\n\n## Core Design Principles\n- **Trust & Freshness:** Visual language evokes reliability and fresh produce\n- **Clarity Over Decoration:** Information-dense interfaces prioritize readability\n- **Role-Appropriate Density:** Customers get spacious layouts, admins get data-dense views\n- **Mobile-Priority:** All interfaces optimized for touch-first interaction\n\n## Color Palette\n\n### Light Mode (Primary)\n- **Primary Brand:** 140 75% 45% (Fresh green - groceries/organic)\n- **Primary Variant:** 140 60% 35% (Darker green for emphasis)\n- **Secondary:** 25 85% 55% (Warm orange - special offers/urgency)\n- **Background:** 0 0% 98% (Soft off-white)\n- **Surface:** 0 0% 100% (Pure white for cards)\n- **Surface Variant:** 140 15% 96% (Subtle green tint)\n- **Error:** 0 70% 50% (Standard red for alerts)\n- **Success:** 140 60% 45% (Matches primary)\n\n### Dark Mode\n- **Primary Brand:** 140 60% 65% (Lighter green for contrast)\n- **Primary Variant:** 140 75% 55%\n- **Secondary:** 25 75% 65%\n- **Background:** 0 0% 10% (Deep charcoal)\n- **Surface:** 0 0% 15% (Elevated surfaces)\n- **Surface Variant:** 140 10% 18%\n\n### Semantic Colors\n- **Warning:** 45 95% 55% (Delivery time alerts)\n- **Info:** 210 80% 55% (Notifications)\n- **Delivery Active:** 140 75% 45% (Driver en route)\n- **Pending Order:** 25 60% 50%\n\n## Typography\n\n### Font Stack\n- **Primary:** 'Inter', system-ui, -apple-system, sans-serif\n- **Accent/Display:** 'Plus Jakarta Sans', sans-serif (for branding, banners)\n\n### Type Scale\n- **Hero/Banner:** 32px/1.2, Bold (Special offers, promotions)\n- **Page Titles:** 24px/1.3, Semibold\n- **Section Headers:** 20px/1.4, Semibold\n- **Body Large:** 16px/1.5, Regular (Product names, order details)\n- **Body:** 14px/1.5, Regular (General content)\n- **Caption:** 12px/1.4, Medium (Timestamps, metadata)\n- **Button Text:** 14px/1, Semibold\n\n## Layout System\n\n### Spacing Scale (Tailwind Units)\n**Core Units:** 2, 4, 6, 8, 12, 16\n- Component padding: p-4, p-6\n- Section spacing: py-8, py-12\n- Card spacing: p-4 (mobile), p-6 (desktop)\n- List item spacing: py-3\n- Form field spacing: space-y-4\n\n### Container Widths\n- **Mobile:** Full width with px-4 side padding\n- **Tablet:** max-w-2xl mx-auto\n- **Desktop Admin:** max-w-7xl mx-auto\n- **Desktop Customer:** max-w-4xl mx-auto (focused shopping experience)\n\n### Grid Systems\n- **Product Grid:** grid-cols-2 (mobile), grid-cols-3 (tablet), grid-cols-4 (desktop)\n- **Category Grid:** grid-cols-2 (mobile), grid-cols-3 (desktop)\n- **Order Cards:** Single column stack on all devices\n- **Admin Tables:** Responsive horizontal scroll on mobile\n\n## Component Library\n\n### Navigation\n**Customer Bottom Tab Bar:**\n- Fixed bottom navigation with 5 icons (Home, Orders, Specials, Notifications, Cart)\n- Active state: Primary green with label, Inactive: Gray with icon only\n- Cart badge: Red circle with item count\n- Notification badge: Red dot indicator\n\n**Driver Top Bar:**\n- Minimal header with driver name, current delivery count\n- Hamburger menu for settings/profile\n\n**Admin Sidebar:**\n- Persistent left sidebar (desktop) with collapsible sections\n- Converts to hamburger menu on mobile\n- Icons + labels for all sections\n\n### Cards\n**Product Card:**\n- Image aspect ratio 1:1 (square)\n- Product name (truncate 2 lines)\n- Price (bold, large)\n- Stock indicator (subtle badge)\n- Quick add button (floating FAB style on image)\n\n**Order Card:**\n- Elevated surface with rounded-2xl corners\n- Status chip at top right\n- Order number, date (caption size)\n- Item count, total price (prominent)\n- Action button based on status\n- Proof of delivery photo (thumbnail, expandable)\n\n**Category Card:**\n- Image aspect ratio 16:9\n- Category name overlay (gradient scrim)\n- Item count badge\n\n### Banners\n**Promotional Banner (Home):**\n- Full-width, rounded-xl\n- Height: 160px (mobile), 200px (desktop)\n- Gradient overlay for text legibility\n- Bold headline + CTA button\n- Swipeable carousel if multiple banners\n\n### Forms\n**Input Fields:**\n- Outlined style with rounded-lg corners\n- Label floats on focus\n- Helper text below field\n- Error state: Red outline + message\n- Success state: Green checkmark icon\n\n**Cart Controls:**\n- Quantity stepper: [-] number [+] buttons\n- Remove item: Swipe gesture + trash icon\n- Coupon selector: Dropdown or modal sheet\n- Delivery time: Date/time picker modal\n\n### Buttons\n**Primary Actions:**\n- Filled style, rounded-lg\n- Height: h-12\n- Full width on mobile, auto width on desktop\n- Loading state: Spinner replaces text\n\n**Secondary Actions:**\n- Outlined style with 2px border\n- Same sizing as primary\n\n**Icon Buttons:**\n- Circular, 40px diameter\n- Ripple effect on tap\n\n### Data Display\n**Order Status Flow:**\n- Horizontal stepper showing: Placed → Preparing → Out for Delivery → Delivered\n- Active step: Primary color, Completed: Success green, Upcoming: Gray\n\n**Driver Map:**\n- Full screen Google Maps integration\n- Custom markers: Start (green pin), Deliveries (numbered pins), Current location (blue dot)\n- Route polyline in primary green\n- Bottom sheet overlay with delivery list\n\n**Admin Tables:**\n- Striped rows for readability\n- Sortable column headers\n- Inline edit for inventory\n- Quick action buttons in last column\n- Pagination footer\n\n### Modals & Overlays\n**Checkout Modal:**\n- Bottom sheet (mobile), centered modal (desktop)\n- Sections clearly divided with dividers\n- Sticky footer with total + Pay button\n\n**Notification Center:**\n- Slide-in drawer from right\n- Unread notifications: Subtle background tint\n- Time grouping: Today, Yesterday, Earlier\n- Tap to mark as read\n\n**Profile Sheet:**\n- Modal with form fields\n- Saved addresses as expandable list\n- Add new address: Opens full-screen form\n\n### Images\n**Hero/Banner Images:**\n- Use high-quality grocery photography (fresh produce, prepared meals, shopping scenes)\n- Apply gradient overlays for text legibility\n- Compress for mobile performance\n\n**Product Images:**\n- Consistent white/transparent backgrounds\n- Minimum 800x800px resolution\n- Lazy load below fold\n\n**Proof of Delivery:**\n- Compressed to 1200px max width\n- Display as thumbnail in order card\n- Tap to view full-screen lightbox\n\n**Category Images:**\n- Curated food photography representing category\n- Consistent color treatment across all categories\n\n## Accessibility\n- Minimum touch target: 44x44px\n- Color contrast ratio: 4.5:1 for text, 3:1 for UI components\n- Focus indicators visible on all interactive elements\n- Screen reader labels for icon-only buttons\n- Dark mode toggle in settings\n\n## Animations\nUse sparingly for feedback only:\n- Button press: Subtle scale down (0.95)\n- Cart add: Brief scale pulse on cart icon\n- Page transitions: 200ms fade\n- Loading states: Shimmer placeholders\n- Delivery status change: Confetti animation (delivered state only)\n\n## Role-Specific Design Notes\n\n**Customer App:** Spacious, image-rich, large touch targets, minimal text density\n**Driver App:** Map-centric, quick actions, large status buttons, GPS-optimized\n**Admin Panel:** Dense information, data tables, bulk actions, multiple filters, desktop-optimized with mobile fallback","size_bytes":7495},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FreshCart - Grocery Delivery Application\n\n## Overview\n\nFreshCart is a multi-role grocery delivery platform built as a mobile-first web application. The system serves three distinct user roles: customers browsing and ordering groceries, delivery drivers managing their routes and deliveries, and administrators managing the entire platform. The application emphasizes fresh produce delivery with features like real-time order tracking, special offers, promotional banners, and a comprehensive product catalog organized by categories.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n\n**Design System**: shadcn/ui components built on Radix UI primitives, following Material Design 3 principles adapted for mobile-first grocery delivery\n\n**Styling**: Tailwind CSS with custom theme variables supporting both light and dark modes. The design emphasizes a fresh green color palette (HSL 140 75% 45%) to evoke organic/fresh produce, with semantic colors for different order states and delivery statuses.\n\n**State Management**: TanStack Query (React Query) for server state with custom query client configuration. Local component state managed with React hooks.\n\n**Routing**: Currently implements client-side navigation through component state rather than a traditional router (uses tab-based navigation for customer views and role switching).\n\n**UI Patterns**: \n- Mobile-first responsive design with bottom navigation for customers\n- Sidebar navigation for admin dashboard\n- Card-based layouts for products, orders, and deliveries\n- Carousel/banner components for promotions\n- Modal dialogs for confirmations and detailed views\n\n### Backend Architecture\n\n**Runtime**: Node.js with Express.js server\n\n**Language**: TypeScript with ES modules\n\n**API Pattern**: RESTful API with routes prefixed under `/api`\n\n**Development Mode**: Vite middleware integration for hot module replacement in development\n\n**Storage Interface**: Abstract storage interface (`IStorage`) currently implemented with in-memory storage (`MemStorage`) - designed to be swapped with database implementation\n\n**Session Management**: Structure exists for session handling (references to `connect-pg-simple` in dependencies suggest PostgreSQL session storage planned)\n\n### Data Storage Solutions\n\n**ORM**: Drizzle ORM configured for PostgreSQL\n\n**Database**: Neon serverless PostgreSQL (via `@neondatabase/serverless` with WebSocket support)\n\n**Schema Design**: \n- Users table with username/password authentication\n- Categories with images, sort order, and active status\n- Special banners for promotions with configurable display order\n- Additional product, order, and delivery tables referenced in components but not yet in schema file\n\n**Migrations**: Drizzle Kit configured with migrations stored in `./migrations` directory\n\n**Data Validation**: Zod schemas generated from Drizzle table definitions for runtime validation\n\n### Authentication & Authorization\n\n**Current State**: Basic user schema exists with username/password fields, but authentication middleware not yet implemented\n\n**Planned Approach**: Session-based authentication (indicated by session store dependencies)\n\n**Role System**: Three-tier role system (customer, driver, admin) currently managed client-side through role selector - needs server-side enforcement\n\n### External Dependencies\n\n**Payment Processing**: Stripe integration via `@stripe/stripe-js` and `@stripe/react-stripe-js`\n\n**Database Provider**: Neon serverless PostgreSQL for scalable database hosting\n\n**Font Services**: Google Fonts serving Inter (primary) and Plus Jakarta Sans (display/accent)\n\n**Image Hosting**: Currently using Unsplash URLs for placeholder images - production should use CDN or object storage\n\n**UI Component Library**: Radix UI primitives for accessible, unstyled components with custom theming\n\n**Development Tools**: \n- Replit-specific plugins for runtime error overlay, cartographer, and dev banner\n- TypeScript for type safety\n- ESBuild for production bundling\n- PostCSS with Autoprefixer for CSS processing\n\n### Key Architectural Decisions\n\n**Monorepo Structure**: Client and server code share types through `shared/schema.ts`, enabling type-safe API contracts\n\n**Mobile-First Design**: All interfaces optimized for touch interaction with responsive breakpoints, safe area handling for mobile browsers\n\n**Role-Based Views**: Single application serving different interfaces based on user role rather than separate applications, reducing code duplication while maintaining distinct UX for each persona\n\n**Mock Data Strategy**: Extensive use of mock data in components (marked with `//todo: remove mock functionality`) allows frontend development to proceed independently of backend implementation\n\n**Progressive Enhancement**: Storage interface abstraction allows starting with in-memory storage and migrating to PostgreSQL without changing application logic\n\n**Component Isolation**: Example components provided for design system documentation and testing in isolation\n\n**Theming Approach**: CSS custom properties for colors with automatic dark mode support, allowing runtime theme switching without rebuilding","size_bytes":5287},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"-apple-system\", \"sans-serif\"],\n        display: [\"Plus Jakarta Sans\", \"sans-serif\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4099},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const specialBanners = pgTable(\"special_banners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imageUrl: text(\"image_url\").notNull(),\n  linkUrl: text(\"link_url\").notNull(),\n  title: text(\"title\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const insertSpecialBannerSchema = createInsertSchema(specialBanners).omit({\n  id: true,\n});\n\nexport type InsertSpecialBanner = z.infer<typeof insertSpecialBannerSchema>;\nexport type SpecialBanner = typeof specialBanners.$inferSelect;\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport const subcategories = pgTable(\"subcategories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\").notNull().references(() => categories.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const insertSubcategorySchema = createInsertSchema(subcategories).omit({\n  id: true,\n});\n\nexport type InsertSubcategory = z.infer<typeof insertSubcategorySchema>;\nexport type Subcategory = typeof subcategories.$inferSelect;\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subcategoryId: varchar(\"subcategory_id\").notNull().references(() => subcategories.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  unit: text(\"unit\").notNull().default(\"each\"),\n  inStock: boolean(\"in_stock\").notNull().default(true),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull().default(1),\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n});\n\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\n\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  addedAt: timestamp(\"added_at\").notNull().defaultNow(),\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: text(\"status\").notNull().default(\"Placed\"),\n  deliveryMode: text(\"delivery_mode\").notNull().default(\"Delivery\"),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  productName: text(\"product_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":6493},"client/src/App.tsx":{"content":"import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport { RoleSelector } from \"@/components/RoleSelector\";\nimport { CustomerBottomNav } from \"@/components/CustomerBottomNav\";\nimport { CartProvider, useCart } from \"@/contexts/CartContext\";\nimport CustomerHome from \"@/pages/CustomerHome\";\nimport CustomerOrders from \"@/pages/CustomerOrders\";\nimport CustomerSpecials from \"@/pages/CustomerSpecials\";\nimport CustomerNotifications from \"@/pages/CustomerNotifications\";\nimport CustomerCart from \"@/pages/CustomerCart\";\nimport CustomerCheckout from \"@/pages/CustomerCheckout\";\nimport CustomerWishlist from \"@/pages/CustomerWishlist\";\nimport DriverDashboard from \"@/pages/DriverDashboard\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\n\nfunction CustomerView() {\n  const [activeTab, setActiveTab] = useState<string>(\"home\");\n  const { uniqueItemCount } = useCart();\n\n  const renderView = () => {\n    switch (activeTab) {\n      case \"home\":\n        return <CustomerHome />;\n      case \"orders\":\n        return <CustomerOrders />;\n      case \"specials\":\n        return <CustomerSpecials />;\n      case \"notifications\":\n        return <CustomerNotifications />;\n      case \"cart\":\n        return <CustomerCart onProceedToCheckout={() => setActiveTab(\"checkout\")} />;\n      case \"checkout\":\n        return <CustomerCheckout onBack={() => setActiveTab(\"cart\")} />;\n      default:\n        return <CustomerHome />;\n    }\n  };\n\n  return (\n    <>\n      {renderView()}\n      <CustomerBottomNav\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        cartCount={uniqueItemCount}\n        notificationCount={2}\n      />\n    </>\n  );\n}\n\nfunction App() {\n  const [role, setRole] = useState<string>(\"customer\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <CartProvider>\n          <div className=\"min-h-screen bg-background\">\n            <RoleSelector role={role} onRoleChange={setRole} />\n            \n            {role === \"customer\" && <CustomerView />}\n\n            {role === \"driver\" && <DriverDashboard />}\n\n            {role === \"admin\" && <AdminDashboard />}\n          </div>\n          <Toaster />\n        </CartProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2652},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 140 6% 96%;\n\n  --sidebar-foreground: 140 6% 15%;\n\n  --sidebar-border: 140 6% 90%;\n\n  --sidebar-primary: 140 75% 45%;\n\n  --sidebar-primary-foreground: 140 75% 98%;\n\n  --sidebar-accent: 140 8% 92%;\n\n  --sidebar-accent-foreground: 140 8% 20%;\n\n  --sidebar-ring: 140 75% 45%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 94%;\n\n  --primary: 140 75% 45%;\n\n  --primary-foreground: 140 75% 98%;\n\n  --secondary: 140 4% 90%;\n\n  --secondary-foreground: 140 4% 18%;\n\n  --muted: 140 6% 94%;\n\n  --muted-foreground: 140 6% 38%;\n\n  --accent: 140 12% 92%;\n\n  --accent-foreground: 140 12% 22%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 70% 98%;\n\n  --input: 0 0% 78%;\n  --ring: 140 75% 45%;\n  --chart-1: 140 75% 38%;\n  --chart-2: 25 85% 48%;\n  --chart-3: 210 80% 48%;\n  --chart-4: 280 65% 52%;\n  --chart-5: 45 95% 48%;\n\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.07), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.08), 0px 2px 6px -2px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 12px 24px 0px hsl(0 0% 0% / 0.10), 0px 4px 8px -2px hsl(0 0% 0% / 0.08);\n  --shadow-xl: 0px 20px 40px 0px hsl(0 0% 0% / 0.12), 0px 8px 16px -4px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 32px 64px 0px hsl(0 0% 0% / 0.14);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 10%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 22%;\n\n  --card: 0 0% 15%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 20%;\n\n  --sidebar: 140 4% 18%;\n\n  --sidebar-foreground: 140 4% 92%;\n\n  --sidebar-border: 140 4% 24%;\n\n  --sidebar-primary: 140 60% 65%;\n\n  --sidebar-primary-foreground: 140 60% 12%;\n\n  --sidebar-accent: 140 6% 22%;\n\n  --sidebar-accent-foreground: 140 6% 88%;\n\n  --sidebar-ring: 140 60% 65%;\n\n  --popover: 0 0% 15%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 140 75% 55%;\n\n  --primary-foreground: 140 75% 8%;\n\n  --secondary: 140 4% 24%;\n\n  --secondary-foreground: 140 4% 90%;\n\n  --muted: 140 6% 20%;\n\n  --muted-foreground: 140 6% 70%;\n\n  --accent: 140 10% 22%;\n\n  --accent-foreground: 140 10% 88%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 70% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 0 0% 32%;\n  --ring: 140 60% 65%;\n  --chart-1: 140 60% 72%;\n  --chart-2: 25 75% 68%;\n  --chart-3: 210 70% 72%;\n  --chart-4: 280 55% 72%;\n  --chart-5: 45 85% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.50);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.45), 0px 1px 2px -1px hsl(0 0% 0% / 0.45);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.50), 0px 2px 4px -1px hsl(0 0% 0% / 0.45);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.55), 0px 2px 6px -2px hsl(0 0% 0% / 0.50);\n  --shadow-lg: 0px 12px 24px 0px hsl(0 0% 0% / 0.60), 0px 4px 8px -2px hsl(0 0% 0% / 0.55);\n  --shadow-xl: 0px 20px 40px 0px hsl(0 0% 0% / 0.65), 0px 8px 16px -4px hsl(0 0% 0% / 0.60);\n  --shadow-2xl: 0px 32px 64px 0px hsl(0 0% 0% / 0.70);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Hide scrollbar for carousel */\n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n}","size_bytes":11492},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CartItem.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Plus, Minus, Trash2 } from \"lucide-react\";\n\ninterface CartItemProps {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n  unit: string;\n  onIncrease: () => void;\n  onDecrease: () => void;\n  onRemove: () => void;\n}\n\nexport function CartItem({\n  id,\n  name,\n  price,\n  quantity,\n  image,\n  unit,\n  onIncrease,\n  onDecrease,\n  onRemove,\n}: CartItemProps) {\n  return (\n    <div className=\"flex gap-3 py-4 border-b\" data-testid={`cart-item-${id}`}>\n      <div className=\"w-16 h-16 bg-muted rounded-md overflow-hidden flex-shrink-0\">\n        <img src={image} alt={name} className=\"w-full h-full object-cover\" />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex justify-between gap-2 mb-1\">\n          <h3 className=\"font-medium text-sm line-clamp-2 flex-1\" data-testid={`text-cart-item-name-${id}`}>\n            {name}\n          </h3>\n          <p className=\"font-bold text-sm flex-shrink-0\" data-testid={`text-cart-item-total-${id}`}>\n            ${(price * quantity).toFixed(2)}\n          </p>\n        </div>\n        <p className=\"text-xs text-muted-foreground mb-2\">\n          ${price.toFixed(2)}/{unit}\n        </p>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-1\">\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              onClick={onDecrease}\n              data-testid={`button-decrease-cart-${id}`}\n            >\n              <Minus />\n            </Button>\n            <span className=\"font-semibold min-w-[2rem] text-center text-sm\" data-testid={`text-cart-quantity-${id}`}>\n              {quantity}\n            </span>\n            <Button\n              size=\"icon\"\n              onClick={onIncrease}\n              data-testid={`button-increase-cart-${id}`}\n            >\n              <Plus />\n            </Button>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"text-destructive ml-auto\"\n            onClick={onRemove}\n            data-testid={`button-remove-cart-${id}`}\n          >\n            <Trash2 />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2251},"client/src/components/CategoryCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { ChevronRight } from \"lucide-react\";\n\ninterface CategoryCardProps {\n  id: string;\n  name: string;\n  image: string;\n  itemCount: number;\n  onClick?: () => void;\n}\n\nexport function CategoryCard({ id, name, image, itemCount, onClick }: CategoryCardProps) {\n  return (\n    <Card \n      className=\"overflow-hidden hover-elevate active-elevate-2 cursor-pointer\" \n      onClick={onClick}\n      data-testid={`card-category-${id}`}\n    >\n      <div className=\"aspect-square bg-muted\">\n        <img\n          src={image}\n          alt={name}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      <div className=\"p-2\">\n        <h3 className=\"font-semibold text-xs leading-tight line-clamp-2 text-center\" data-testid={`text-category-name-${id}`}>\n          {name}\n        </h3>\n      </div>\n      \n      {/* Previous overlay format:\n      <div className=\"relative aspect-video bg-muted\">\n        <img\n          src={image}\n          alt={name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n        <div className=\"absolute bottom-0 left-0 right-0 p-2 text-white\">\n          <div className=\"flex items-center justify-between gap-1\">\n            <h3 className=\"font-semibold text-sm leading-tight line-clamp-2 flex-1 min-w-0\" data-testid={`text-category-name-${id}`}>\n              {name}\n            </h3>\n            <ChevronRight className=\"h-4 w-4 flex-shrink-0\" />\n          </div>\n        </div>\n      </div>\n      */}\n    </Card>\n  );\n}\n","size_bytes":1613},"client/src/components/CustomerBottomNav.tsx":{"content":"import { Home, Package, Tag, Bell, ShoppingCart } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface CustomerBottomNavProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  cartCount?: number;\n  notificationCount?: number;\n}\n\nexport function CustomerBottomNav({\n  activeTab,\n  onTabChange,\n  cartCount = 0,\n  notificationCount = 0,\n}: CustomerBottomNavProps) {\n  const tabs = [\n    { id: \"home\", label: \"Home\", icon: Home },\n    { id: \"orders\", label: \"Orders\", icon: Package },\n    { id: \"specials\", label: \"Specials\", icon: Tag },\n    { id: \"notifications\", label: \"Notifications\", icon: Bell, badge: notificationCount },\n    { id: \"cart\", label: \"Cart\", icon: ShoppingCart, badge: cartCount },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t z-50 safe-area-bottom\">\n      <div className=\"flex items-center justify-around max-w-md mx-auto\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          const isActive = activeTab === tab.id;\n\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={`flex flex-col items-center gap-0.5 py-2 px-3 flex-1 min-w-0 hover-elevate active-elevate-2 transition-colors ${\n                isActive ? \"text-primary\" : \"text-muted-foreground\"\n              }`}\n              data-testid={`button-nav-${tab.id}`}\n            >\n              <div className=\"relative\">\n                <Icon className=\"h-6 w-6\" />\n                {tab.badge && tab.badge > 0 ? (\n                  <div\n                    className=\"absolute -top-1 -right-1 h-4 min-w-[1rem] px-1 flex items-center justify-center bg-destructive text-white text-[10px] font-semibold rounded-full\"\n                    data-testid={`badge-${tab.id}-count`}\n                  >\n                    {tab.badge}\n                  </div>\n                ) : null}\n              </div>\n              <span className={`text-[10px] leading-tight ${isActive ? \"font-semibold\" : \"font-medium\"}`}>\n                {tab.label}\n              </span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2189},"client/src/components/DeliveryCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Phone, Package, Clock, Camera, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface OrderItem {\n  id: string;\n  name: string;\n  quantity: number;\n  price: number;\n}\n\ninterface DeliveryCardProps {\n  id: string;\n  orderNumber: string;\n  customerName: string;\n  customerPhone: string;\n  address: string;\n  itemCount: number;\n  items?: OrderItem[];\n  scheduledTime: string;\n  status: \"pending\" | \"in_progress\" | \"delivered\";\n  onStatusChange: (status: string) => void;\n  onTakePhoto: () => void;\n}\n\nexport function DeliveryCard({\n  id,\n  orderNumber,\n  customerName,\n  customerPhone,\n  address,\n  itemCount,\n  items = [],\n  scheduledTime,\n  status,\n  onStatusChange,\n  onTakePhoto,\n}: DeliveryCardProps) {\n  const [showItems, setShowItems] = useState(false);\n\n  return (\n    <Card className=\"p-4\" data-testid={`card-delivery-${id}`}>\n      <div className=\"flex items-start justify-between mb-3\">\n        <div>\n          <p className=\"font-semibold\" data-testid={`text-delivery-order-${id}`}>\n            Order #{orderNumber}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">{customerName}</p>\n        </div>\n        <Badge\n          className={\n            status === \"delivered\"\n              ? \"bg-chart-1 text-white\"\n              : status === \"in_progress\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-muted text-muted-foreground\"\n          }\n          data-testid={`badge-delivery-status-${id}`}\n        >\n          {status === \"delivered\"\n            ? \"Delivered\"\n            : status === \"in_progress\"\n            ? \"In Progress\"\n            : \"Pending\"}\n        </Badge>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        <div className=\"flex items-start gap-2 text-sm\">\n          <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n          <span className=\"flex-1\" data-testid={`text-delivery-address-${id}`}>\n            {address}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm\">\n          <Phone className=\"h-4 w-4 text-muted-foreground\" />\n          <span data-testid={`text-customer-phone-${id}`}>{customerPhone}</span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <span data-testid={`text-scheduled-time-${id}`}>{scheduledTime}</span>\n        </div>\n        \n        <button\n          onClick={() => setShowItems(!showItems)}\n          className=\"flex items-center gap-2 text-sm w-full py-2 hover-elevate active-elevate-2 rounded-md\"\n          data-testid={`button-toggle-items-${id}`}\n        >\n          <Package className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"flex-1 text-left\">{itemCount} items</span>\n          {showItems ? (\n            <ChevronUp className=\"h-4 w-4 text-muted-foreground\" />\n          ) : (\n            <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n          )}\n        </button>\n\n        {showItems && items.length > 0 && (\n          <div className=\"ml-6 space-y-1 pt-2 border-t\" data-testid={`order-items-${id}`}>\n            {items.map((item) => (\n              <div key={item.id} className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">\n                  {item.quantity}x {item.name}\n                </span>\n                <span className=\"font-medium\">${item.price.toFixed(2)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex gap-2\">\n        {status === \"pending\" && (\n          <Button\n            className=\"flex-1\"\n            onClick={() => onStatusChange(\"in_progress\")}\n            data-testid={`button-start-delivery-${id}`}\n          >\n            Start Delivery\n          </Button>\n        )}\n        {status === \"in_progress\" && (\n          <>\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={onTakePhoto}\n              data-testid={`button-take-photo-${id}`}\n            >\n              <Camera className=\"h-4 w-4 mr-2\" />\n              Take Photo\n            </Button>\n            <Button\n              className=\"flex-1\"\n              onClick={() => onStatusChange(\"delivered\")}\n              data-testid={`button-complete-delivery-${id}`}\n            >\n              Complete\n            </Button>\n          </>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4618},"client/src/components/DeliveryMap.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Navigation } from \"lucide-react\";\n\ninterface DeliveryMapProps {\n  deliveryCount: number;\n  onSetStartLocation: () => void;\n}\n\nexport function DeliveryMap({ deliveryCount, onSetStartLocation }: DeliveryMapProps) {\n  return (\n    <Card className=\"relative h-[400px] overflow-hidden bg-muted\">\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <MapPin className=\"h-8 w-8 text-primary\" />\n          </div>\n          <p className=\"text-muted-foreground mb-4\">\n            Map integration will show {deliveryCount} delivery locations\n          </p>\n          <Button onClick={onSetStartLocation} data-testid=\"button-set-start-location\">\n            <Navigation className=\"h-4 w-4 mr-2\" />\n            Set Start Location\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1077},"client/src/components/NotificationItem.tsx":{"content":"import { Bell, Package, Truck, CheckCircle } from \"lucide-react\";\n\ninterface NotificationItemProps {\n  id: string;\n  type: \"order\" | \"delivery\" | \"promo\" | \"delivered\";\n  title: string;\n  message: string;\n  time: string;\n  isRead: boolean;\n}\n\nconst iconMap = {\n  order: Package,\n  delivery: Truck,\n  promo: Bell,\n  delivered: CheckCircle,\n};\n\nexport function NotificationItem({\n  id,\n  type,\n  title,\n  message,\n  time,\n  isRead,\n}: NotificationItemProps) {\n  const Icon = iconMap[type];\n\n  return (\n    <div\n      className={`flex gap-3 p-4 hover-elevate active-elevate-2 cursor-pointer ${\n        !isRead ? \"bg-primary/5\" : \"\"\n      }`}\n      data-testid={`notification-${id}`}\n    >\n      <div className={`p-2 rounded-full ${!isRead ? \"bg-primary/10\" : \"bg-muted\"} h-fit`}>\n        <Icon className={`h-5 w-5 ${!isRead ? \"text-primary\" : \"text-muted-foreground\"}`} />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-start justify-between gap-2 mb-1\">\n          <h4 className=\"font-semibold text-sm\" data-testid={`text-notification-title-${id}`}>\n            {title}\n          </h4>\n          {!isRead && (\n            <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-1\" />\n          )}\n        </div>\n        <p className=\"text-sm text-muted-foreground line-clamp-2 mb-1\" data-testid={`text-notification-message-${id}`}>\n          {message}\n        </p>\n        <p className=\"text-xs text-muted-foreground\" data-testid={`text-notification-time-${id}`}>\n          {time}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1571},"client/src/components/OrderCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package, MapPin, Clock } from \"lucide-react\";\n\ninterface OrderCardProps {\n  id: string;\n  orderNumber: string;\n  date: string;\n  status: \"Placed\" | \"Processing\" | \"Shipped\" | \"Complete\";\n  itemCount: number;\n  total: number;\n  onViewDetails?: () => void;\n  onReorder?: () => void;\n  onRateOrder?: () => void;\n}\n\nconst statusConfig = {\n  Placed: { label: \"Placed\", color: \"bg-chart-5 text-white\" },\n  Processing: { label: \"Processing\", color: \"bg-chart-3 text-white\" },\n  Shipped: { label: \"Shipped\", color: \"bg-primary text-primary-foreground\" },\n  Complete: { label: \"Complete\", color: \"bg-chart-1 text-white\" },\n};\n\nexport function OrderCard({\n  id,\n  orderNumber,\n  date,\n  status,\n  itemCount,\n  total,\n  onViewDetails,\n  onReorder,\n  onRateOrder,\n}: OrderCardProps) {\n  const config = statusConfig[status];\n\n  return (\n    <Card className=\"p-4 hover-elevate cursor-pointer\" data-testid={`card-order-${id}`} onClick={onViewDetails}>\n      <div className=\"flex items-start justify-between mb-3\">\n        <div>\n          <p className=\"font-semibold\" data-testid={`text-order-number-${id}`}>\n            Order #{orderNumber}\n          </p>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`text-order-date-${id}`}>\n            {date}\n          </p>\n        </div>\n        <Badge className={config.color} data-testid={`badge-status-${id}`}>\n          {config.label}\n        </Badge>\n      </div>\n\n      <div className=\"pt-3 border-t space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">{itemCount} items</p>\n            <p className=\"text-lg font-bold\" data-testid={`text-total-${id}`}>\n              ${total.toFixed(2)}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\" onClick={(e) => e.stopPropagation()}>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={onReorder}\n            className=\"flex-1\"\n            data-testid={`button-reorder-${id}`}\n          >\n            Reorder\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={onRateOrder}\n            className=\"flex-1\"\n            data-testid={`button-rate-order-${id}`}\n          >\n            Rate Order\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2533},"client/src/components/ProductCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Minus, Heart } from \"lucide-react\";\nimport { type MouseEvent } from \"react\";\nimport { useCart } from \"@/contexts/CartContext\";\n\ninterface ProductCardProps {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  unit: string;\n  stock: number;\n  onWishlistToggle?: (id: string) => void;\n  isInWishlist?: boolean;\n}\n\nexport function ProductCard({ id, name, price, image, unit, stock, onWishlistToggle, isInWishlist = false }: ProductCardProps) {\n  const { addToCart, getItemQuantity } = useCart();\n  const quantity = getItemQuantity(id);\n\n  const handleAdd = () => {\n    if (quantity < stock) {\n      addToCart(id, name, price, image, unit, quantity + 1);\n    }\n  };\n\n  const handleRemove = () => {\n    if (quantity > 0) {\n      addToCart(id, name, price, image, unit, quantity - 1);\n    }\n  };\n\n  const handleWishlistToggle = (e: MouseEvent) => {\n    e.stopPropagation();\n    onWishlistToggle?.(id);\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate\">\n      <div className=\"relative aspect-square bg-muted\">\n        <img\n          src={image}\n          alt={name}\n          className=\"w-full h-full object-cover\"\n        />\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"absolute top-2 right-2 bg-background/80 backdrop-blur-sm hover:bg-background\"\n          onClick={handleWishlistToggle}\n          data-testid={`button-wishlist-${id}`}\n        >\n          <Heart \n            className={`h-4 w-4 ${isInWishlist ? 'fill-primary text-primary' : ''}`}\n          />\n        </Button>\n        {stock < 10 && stock > 0 && (\n          <div className=\"absolute top-2 left-2 bg-chart-2 text-white text-xs px-2 py-1 rounded-md\">\n            Low Stock\n          </div>\n        )}\n        {stock === 0 && (\n          <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n            <span className=\"text-white font-semibold\">Out of Stock</span>\n          </div>\n        )}\n      </div>\n      <div className=\"p-4\">\n        <h3 className=\"font-medium text-sm line-clamp-2 mb-1\" data-testid={`text-product-name-${id}`}>\n          {name}\n        </h3>\n        <div className=\"flex items-baseline gap-1 mb-3\">\n          <span className=\"text-lg font-bold\" data-testid={`text-price-${id}`}>\n            ${price.toFixed(2)}\n          </span>\n          <span className=\"text-xs text-muted-foreground\">/{unit}</span>\n        </div>\n        {quantity === 0 ? (\n          <Button\n            size=\"sm\"\n            className=\"w-full\"\n            onClick={handleAdd}\n            disabled={stock === 0}\n            data-testid={`button-add-${id}`}\n          >\n            <Plus className=\"h-4 w-4 mr-1\" />\n            ADD\n          </Button>\n        ) : (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              onClick={handleRemove}\n              data-testid={`button-decrease-${id}`}\n            >\n              <Minus className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"font-semibold min-w-[2rem] text-center\" data-testid={`text-quantity-${id}`}>\n              {quantity}\n            </span>\n            <Button\n              size=\"icon\"\n              onClick={handleAdd}\n              disabled={quantity >= stock}\n              data-testid={`button-increase-${id}`}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3614},"client/src/components/PromoBanner.tsx":{"content":"import useEmblaCarousel from \"embla-carousel-react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport type { SpecialBanner } from \"@shared/schema\";\n\ninterface PromoBannerProps {\n  banners: SpecialBanner[];\n  onBannerClick?: (banner: SpecialBanner) => void;\n}\n\nexport function PromoBanner({ banners, onBannerClick }: PromoBannerProps) {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true, align: \"start\" });\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [, setLocation] = useLocation();\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi) return;\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n  }, [emblaApi]);\n\n  const handleBannerClick = useCallback((banner: SpecialBanner) => {\n    if (onBannerClick) {\n      onBannerClick(banner);\n    } else {\n      setLocation(banner.linkUrl);\n    }\n  }, [onBannerClick, setLocation]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    onSelect();\n    emblaApi.on(\"select\", onSelect);\n    emblaApi.on(\"reInit\", onSelect);\n\n    return () => {\n      emblaApi.off(\"select\", onSelect);\n      emblaApi.off(\"reInit\", onSelect);\n    };\n  }, [emblaApi, onSelect]);\n\n  if (banners.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"relative\" data-testid=\"carousel-promo-banner\">\n      <div className=\"overflow-hidden rounded-lg\" ref={emblaRef}>\n        <div className=\"flex\">\n          {banners.map((banner) => (\n            <div\n              key={banner.id}\n              className=\"flex-[0_0_100%] min-w-0\"\n              data-testid={`slide-banner-${banner.id}`}\n            >\n              <div\n                className=\"relative h-40 md:h-48 overflow-hidden rounded-lg cursor-pointer hover-elevate active-elevate-2\"\n                onClick={() => handleBannerClick(banner)}\n              >\n                <img\n                  src={banner.imageUrl}\n                  alt={banner.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 to-transparent\" />\n                <div className=\"absolute inset-0 p-6 flex flex-col justify-center\">\n                  <h2 className=\"font-display font-bold text-2xl md:text-3xl text-white mb-2\">\n                    {banner.title}\n                  </h2>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {banners.length > 1 && (\n        <>\n          <div className=\"absolute bottom-4 right-4 flex gap-2 md:flex hidden\">\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              className=\"bg-white/80 backdrop-blur-sm hover:bg-white\"\n              onClick={scrollPrev}\n              data-testid=\"button-banner-prev\"\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              className=\"bg-white/80 backdrop-blur-sm hover:bg-white\"\n              onClick={scrollNext}\n              data-testid=\"button-banner-next\"\n            >\n              <ChevronRight className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2\">\n            {banners.map((_, index) => (\n              <button\n                key={index}\n                className={`w-2 h-2 rounded-full transition-all ${\n                  index === selectedIndex ? \"bg-white w-6\" : \"bg-white/50\"\n                }`}\n                onClick={() => emblaApi?.scrollTo(index)}\n                data-testid={`button-banner-dot-${index}`}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":4083},"client/src/components/RoleSelector.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface RoleSelectorProps {\n  role: string;\n  onRoleChange: (role: string) => void;\n}\n\nexport function RoleSelector({ role, onRoleChange }: RoleSelectorProps) {\n  return (\n    <div className=\"fixed top-4 right-4 z-50\">\n      <Select value={role} onValueChange={onRoleChange}>\n        <SelectTrigger className=\"w-[180px] bg-card\" data-testid=\"select-role\">\n          <SelectValue placeholder=\"Select role\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"customer\">Customer View</SelectItem>\n          <SelectItem value=\"driver\">Driver View</SelectItem>\n          <SelectItem value=\"admin\">Admin View</SelectItem>\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n","size_bytes":811},"client/src/components/StatsCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: string;\n  trendUp?: boolean;\n}\n\nexport function StatsCard({ title, value, icon: Icon, trend, trendUp }: StatsCardProps) {\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between\">\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-1\" data-testid=\"text-stats-title\">\n            {title}\n          </p>\n          <p className=\"text-2xl font-bold\" data-testid=\"text-stats-value\">\n            {value}\n          </p>\n          {trend && (\n            <p\n              className={`text-sm mt-1 ${\n                trendUp ? \"text-chart-1\" : \"text-destructive\"\n              }`}\n              data-testid=\"text-stats-trend\"\n            >\n              {trend}\n            </p>\n          )}\n        </div>\n        <div className=\"p-3 bg-primary/10 rounded-lg\">\n          <Icon className=\"h-6 w-6 text-primary\" />\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1097},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const isDark = document.documentElement.classList.contains(\"dark\");\n    setTheme(isDark ? \"dark\" : \"light\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    document.documentElement.classList.toggle(\"dark\");\n    localStorage.setItem(\"theme\", newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":879},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { SidebarProvider, Sidebar, SidebarContent, SidebarGroup, SidebarGroupLabel, SidebarGroupContent, SidebarMenu, SidebarMenuItem, SidebarMenuButton, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Home, Package, ShoppingCart, Users, Settings, Tag, MapPin, BarChart3 } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { StatsCard } from \"@/components/StatsCard\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\n//todo: remove mock functionality\nconst stats = [\n  { title: \"Total Revenue\", value: \"$12,450\", icon: BarChart3, trend: \"+12.5%\", trendUp: true },\n  { title: \"Total Orders\", value: \"348\", icon: ShoppingCart, trend: \"+8.2%\", trendUp: true },\n  { title: \"Active Drivers\", value: \"12\", icon: Users, trend: \"+2\", trendUp: true },\n  { title: \"Low Stock Items\", value: \"8\", icon: Package, trend: \"Needs attention\", trendUp: false },\n];\n\n//todo: remove mock functionality\nconst recentOrders = [\n  { id: \"12347\", customer: \"John Doe\", items: 8, total: 45.99, status: \"pending\" },\n  { id: \"12348\", customer: \"Jane Smith\", items: 5, total: 32.50, status: \"preparing\" },\n  { id: \"12349\", customer: \"Bob Johnson\", items: 12, total: 78.25, status: \"out_for_delivery\" },\n];\n\nconst menuItems = [\n  { title: \"Dashboard\", icon: Home, id: \"dashboard\" },\n  { title: \"Products\", icon: Package, id: \"products\" },\n  { title: \"Orders\", icon: ShoppingCart, id: \"orders\" },\n  { title: \"Drivers\", icon: Users, id: \"drivers\" },\n  { title: \"Specials & Banners\", icon: Tag, id: \"content\" },\n  { title: \"Delivery Zones\", icon: MapPin, id: \"zones\" },\n  { title: \"Settings\", icon: Settings, id: \"settings\" },\n];\n\nexport default function AdminDashboard() {\n  const [activeMenu, setActiveMenu] = useState(\"dashboard\");\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <Sidebar>\n          <SidebarContent>\n            <SidebarGroup>\n              <SidebarGroupLabel className=\"text-lg font-display font-bold px-4 py-3\">\n                FreshCart Admin\n              </SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {menuItems.map((item) => (\n                    <SidebarMenuItem key={item.id}>\n                      <SidebarMenuButton\n                        onClick={() => setActiveMenu(item.id)}\n                        isActive={activeMenu === item.id}\n                        data-testid={`button-menu-${item.id}`}\n                      >\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n        </Sidebar>\n\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n\n          <main className=\"flex-1 overflow-auto p-6\">\n            <div className=\"max-w-7xl mx-auto space-y-6\">\n              {activeMenu === \"dashboard\" && (\n                <>\n                  <div>\n                    <h1 className=\"font-display font-bold text-3xl mb-2\">Dashboard</h1>\n                    <p className=\"text-muted-foreground\">Overview of your grocery delivery platform</p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {stats.map((stat, index) => (\n                      <StatsCard key={index} {...stat} />\n                    ))}\n                  </div>\n\n                  <Card className=\"p-6\">\n                    <h2 className=\"font-semibold text-lg mb-4\">Recent Orders</h2>\n                    <div className=\"space-y-3\">\n                      {recentOrders.map((order) => (\n                        <div key={order.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg hover-elevate\">\n                          <div className=\"flex items-center gap-4\">\n                            <div>\n                              <p className=\"font-medium\">Order #{order.id}</p>\n                              <p className=\"text-sm text-muted-foreground\">{order.customer}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold\">${order.total.toFixed(2)}</p>\n                              <p className=\"text-sm text-muted-foreground\">{order.items} items</p>\n                            </div>\n                            <Badge>\n                              {order.status.replace(\"_\", \" \")}\n                            </Badge>\n                            <Button variant=\"outline\" size=\"sm\">\n                              View\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </Card>\n                </>\n              )}\n\n              {activeMenu === \"products\" && (\n                <>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h1 className=\"font-display font-bold text-3xl mb-2\">Product Management</h1>\n                      <p className=\"text-muted-foreground\">Manage categories, subcategories, and products</p>\n                    </div>\n                    <Button data-testid=\"button-add-category\">Add Category</Button>\n                  </div>\n\n                  <Card className=\"p-6\">\n                    <h2 className=\"font-semibold text-lg mb-4\">Categories</h2>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">Fresh Vegetables</p>\n                          <p className=\"text-sm text-muted-foreground\">3 subcategories • 24 products</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                          <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </>\n              )}\n\n              {activeMenu === \"content\" && (\n                <>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h1 className=\"font-display font-bold text-3xl mb-2\">Specials & Banners</h1>\n                      <p className=\"text-muted-foreground\">Manage promotional banners and special offers</p>\n                    </div>\n                    <Button data-testid=\"button-add-banner\">Add Banner</Button>\n                  </div>\n\n                  <Card className=\"p-6\">\n                    <h2 className=\"font-semibold text-lg mb-4\">Active Banners</h2>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-4 p-3 bg-muted/50 rounded-lg\">\n                        <div className=\"w-32 h-20 bg-muted rounded overflow-hidden\">\n                          <img \n                            src=\"https://images.unsplash.com/photo-1542838132-92c53300491e?w=200&h=100&fit=crop\" \n                            alt=\"Banner\" \n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">50% OFF Fresh Produce</p>\n                          <p className=\"text-sm text-muted-foreground\">Links to: /specials/produce</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                          <Button variant=\"outline\" size=\"sm\">Delete</Button>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </>\n              )}\n\n              {activeMenu === \"orders\" && (\n                <div>\n                  <h1 className=\"font-display font-bold text-3xl mb-2\">Orders</h1>\n                  <p className=\"text-muted-foreground\">Manage customer orders</p>\n                </div>\n              )}\n\n              {activeMenu === \"drivers\" && (\n                <div>\n                  <h1 className=\"font-display font-bold text-3xl mb-2\">Driver Management</h1>\n                  <p className=\"text-muted-foreground\">Manage delivery drivers</p>\n                </div>\n              )}\n\n              {activeMenu === \"zones\" && (\n                <div>\n                  <h1 className=\"font-display font-bold text-3xl mb-2\">Delivery Zones</h1>\n                  <p className=\"text-muted-foreground\">Configure delivery zones and ZIP codes</p>\n                </div>\n              )}\n\n              {activeMenu === \"settings\" && (\n                <div>\n                  <h1 className=\"font-display font-bold text-3xl mb-2\">Settings</h1>\n                  <p className=\"text-muted-foreground\">Configure platform settings</p>\n                </div>\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":9854},"client/src/pages/CategoryDetail.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ProductCard } from \"@/components/ProductCard\";\n\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  imageUrl: string;\n  unit: string;\n}\n\ninterface Subcategory {\n  id: string;\n  name: string;\n  products: Product[];\n}\n\ninterface CategoryDetailProps {\n  categoryId: string;\n  categoryName: string;\n  subcategories: Subcategory[];\n  onBack: () => void;\n}\n\nexport default function CategoryDetail({\n  categoryId,\n  categoryName,\n  subcategories,\n  onBack,\n}: CategoryDetailProps) {\n  const [activeSubcategoryId, setActiveSubcategoryId] = useState<string>(\n    subcategories[0]?.id || \"\"\n  );\n  const subcategoryRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n\n  const scrollToSubcategory = (subcategoryId: string) => {\n    setActiveSubcategoryId(subcategoryId);\n    subcategoryRefs.current[subcategoryId]?.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n  };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const id = entry.target.getAttribute(\"data-subcategory-id\");\n            if (id) setActiveSubcategoryId(id);\n          }\n        });\n      },\n      { threshold: 0.5 }\n    );\n\n    Object.values(subcategoryRefs.current).forEach((ref) => {\n      if (ref) observer.observe(ref);\n    });\n\n    return () => observer.disconnect();\n  }, [subcategories]);\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"sticky top-0 z-10 bg-background border-b\">\n        <div className=\"p-4 flex items-center gap-3\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onBack}\n            data-testid=\"button-back-to-categories\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"text-category-name\">\n            {categoryName}\n          </h1>\n        </div>\n\n        <div className=\"px-4 pb-3 overflow-x-auto\">\n          <div className=\"flex gap-2 min-w-max\">\n            {subcategories.map((subcategory) => (\n              <Badge\n                key={subcategory.id}\n                variant={\n                  activeSubcategoryId === subcategory.id ? \"default\" : \"outline\"\n                }\n                className=\"cursor-pointer whitespace-nowrap px-4 py-2\"\n                onClick={() => scrollToSubcategory(subcategory.id)}\n                data-testid={`badge-subcategory-${subcategory.id}`}\n              >\n                {subcategory.name}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n        {subcategories.map((subcategory) => (\n          <div\n            key={subcategory.id}\n            ref={(el) => (subcategoryRefs.current[subcategory.id] = el)}\n            data-subcategory-id={subcategory.id}\n            data-testid={`section-subcategory-${subcategory.id}`}\n          >\n            <h2 className=\"text-lg font-semibold mb-3\">{subcategory.name}</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n              {subcategory.products.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  id={product.id}\n                  name={product.name}\n                  price={product.price}\n                  image={product.imageUrl}\n                  unit={product.unit}\n                  stock={50}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3826},"client/src/pages/CustomerCart.tsx":{"content":"import { CartItem } from \"@/components/CartItem\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { useCart } from \"@/contexts/CartContext\";\n\nconst TAX_RATE = 0.08;\n\ninterface CustomerCartProps {\n  onProceedToCheckout?: () => void;\n}\n\nexport default function CustomerCart({ onProceedToCheckout }: CustomerCartProps) {\n  const { items: cartItems, updateQuantity, removeFromCart } = useCart();\n\n  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const tax = subtotal * TAX_RATE;\n  const total = subtotal + tax;\n\n  const handleIncrease = (id: string) => {\n    const item = cartItems.find(item => item.id === id);\n    if (item) {\n      updateQuantity(id, item.quantity + 1);\n    }\n  };\n\n  const handleDecrease = (id: string) => {\n    const item = cartItems.find(item => item.id === id);\n    if (item && item.quantity > 1) {\n      updateQuantity(id, item.quantity - 1);\n    }\n  };\n\n  const handleRemove = (id: string) => {\n    removeFromCart(id);\n  };\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <h1 className=\"font-display font-bold text-2xl\" data-testid=\"text-cart-title\">My Cart</h1>\n        {cartItems.length > 0 && (\n          <p className=\"text-sm text-muted-foreground\">{cartItems.length} items</p>\n        )}\n      </div>\n\n      {cartItems.length > 0 ? (\n        <div className=\"p-4 space-y-6\">\n          <div>\n            {cartItems.map((item) => (\n              <CartItem\n                key={item.id}\n                {...item}\n                onIncrease={() => handleIncrease(item.id)}\n                onDecrease={() => handleDecrease(item.id)}\n                onRemove={() => handleRemove(item.id)}\n              />\n            ))}\n          </div>\n\n          <Card className=\"p-4\">\n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal</span>\n                <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Tax (8%)</span>\n                <span data-testid=\"text-tax\">${tax.toFixed(2)}</span>\n              </div>\n              <Separator className=\"my-2\" />\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total</span>\n                <span data-testid=\"text-total\">${total.toFixed(2)}</span>\n              </div>\n            </div>\n            <Button \n              className=\"w-full\" \n              size=\"lg\"\n              onClick={onProceedToCheckout}\n              data-testid=\"button-proceed-to-pay\"\n            >\n              Proceed to Pay\n            </Button>\n          </Card>\n        </div>\n      ) : (\n        <div className=\"flex flex-col items-center justify-center py-20 px-4\">\n          <ShoppingCart className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground mb-4\" data-testid=\"text-empty-cart\">Your cart is empty</p>\n          <Button data-testid=\"button-start-shopping\">Start Shopping</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3319},"client/src/pages/CustomerCheckout.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst TAX_RATE = 0.08;\n\ninterface CustomerCheckoutProps {\n  onBack?: () => void;\n}\n\nconst mockCartItems = [\n  { id: \"1\", name: \"Organic Bananas\", price: 2.99, quantity: 2 },\n  { id: \"2\", name: \"Fresh Strawberries\", price: 4.99, quantity: 1 },\n  { id: \"3\", name: \"Roma Tomatoes\", price: 3.49, quantity: 1 },\n];\n\nexport default function CustomerCheckout({ onBack }: CustomerCheckoutProps) {\n  const [deliveryMode, setDeliveryMode] = useState<string>(\"\");\n  const [address, setAddress] = useState<string>(\"\");\n  const [applyRewards, setApplyRewards] = useState<boolean>(false);\n\n  const rewardsBalance = 15.50;\n  const subtotal = mockCartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const tax = subtotal * TAX_RATE;\n  const rewardsDiscount = applyRewards ? Math.min(rewardsBalance, subtotal) : 0;\n  const total = subtotal + tax - rewardsDiscount;\n\n  const handlePlaceOrder = () => {\n    console.log(\"Order placed:\", { deliveryMode, address, total });\n  };\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <div className=\"flex items-center gap-3\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onBack}\n              data-testid=\"button-back-to-cart\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <h1 className=\"font-display font-bold text-2xl\" data-testid=\"text-checkout-title\">\n            Checkout\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        <Card className=\"p-4\">\n          <Label htmlFor=\"delivery-mode\" className=\"text-base font-semibold mb-3 block\">\n            Delivery Mode\n          </Label>\n          <Select value={deliveryMode} onValueChange={setDeliveryMode}>\n            <SelectTrigger id=\"delivery-mode\" data-testid=\"select-delivery-mode\">\n              <SelectValue placeholder=\"Select delivery mode\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"delivery\" data-testid=\"option-delivery\">Delivery</SelectItem>\n              <SelectItem value=\"2hour\" data-testid=\"option-2hour\">2 hour delivery</SelectItem>\n              <SelectItem value=\"pickup\" data-testid=\"option-pickup\">Pickup</SelectItem>\n            </SelectContent>\n          </Select>\n        </Card>\n\n        <Card className=\"p-4\">\n          <Label htmlFor=\"address\" className=\"text-base font-semibold mb-3 block\">\n            Address\n          </Label>\n          <Input\n            id=\"address\"\n            placeholder=\"Enter your delivery address\"\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            data-testid=\"input-address\"\n          />\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div>\n              <Label className=\"text-base font-semibold\">MHG Rewards</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Available balance: ${rewardsBalance.toFixed(2)}\n              </p>\n            </div>\n            <Switch\n              checked={applyRewards}\n              onCheckedChange={setApplyRewards}\n              data-testid=\"switch-apply-rewards\"\n            />\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"space-y-2 mb-4\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Subtotal</span>\n              <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Tax ({(TAX_RATE * 100).toFixed(0)}%)</span>\n              <span data-testid=\"text-tax\">${tax.toFixed(2)}</span>\n            </div>\n            {rewardsDiscount > 0 && (\n              <div className=\"flex justify-between text-sm text-primary\">\n                <span>Rewards Applied</span>\n                <span data-testid=\"text-rewards-discount\">-${rewardsDiscount.toFixed(2)}</span>\n              </div>\n            )}\n            <Separator className=\"my-2\" />\n            <div className=\"flex justify-between font-bold text-lg\">\n              <span>Total</span>\n              <span data-testid=\"text-total\">${total.toFixed(2)}</span>\n            </div>\n          </div>\n          <Button\n            className=\"w-full\"\n            size=\"lg\"\n            onClick={handlePlaceOrder}\n            disabled={!deliveryMode || !address}\n            data-testid=\"button-pay-place-order\"\n          >\n            Pay & Place Order\n          </Button>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5164},"client/src/pages/CustomerHome.tsx":{"content":"import { Search, MapPin, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { PromoBanner } from \"@/components/PromoBanner\";\nimport { CategoryCard } from \"@/components/CategoryCard\";\nimport { ProductCard } from \"@/components/ProductCard\";\nimport { ProductCarousel, type ProductCarouselHandle } from \"@/components/ProductCarousel\";\nimport CategoryDetail from \"./CategoryDetail\";\nimport { useState, useRef } from \"react\";\nimport type { SpecialBanner } from \"@shared/schema\";\n\n//todo: remove mock functionality\nconst mockBanners: SpecialBanner[] = [\n  {\n    id: \"1\",\n    title: \"50% OFF Fresh Produce\",\n    imageUrl: \"https://images.unsplash.com/photo-1542838132-92c53300491e?w=800&h=400&fit=crop\",\n    linkUrl: \"/specials/produce\",\n    sortOrder: 0,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    title: \"Weekend Special: Fresh Meat\",\n    imageUrl: \"https://images.unsplash.com/photo-1607623814075-e51df1bdc82f?w=800&h=400&fit=crop\",\n    linkUrl: \"/specials/meat\",\n    sortOrder: 1,\n    isActive: true,\n  },\n];\n\n//todo: remove mock functionality\nconst categories = [\n  { id: \"1\", name: \"Batters, Dairy & Poultry\", image: \"https://images.unsplash.com/photo-1628088062854-d1870b4553da?w=600&h=400&fit=crop\", itemCount: 48 },\n  { id: \"2\", name: \"Beverages\", image: \"https://images.unsplash.com/photo-1437418747212-8d9709afab22?w=600&h=400&fit=crop\", itemCount: 35 },\n  { id: \"3\", name: \"Breakfast Cereals\", image: \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=600&h=400&fit=crop\", itemCount: 24 },\n  { id: \"4\", name: \"Food Grains, Oils & Masala\", image: \"https://images.unsplash.com/photo-1596797882870-8c33deeac224?w=600&h=400&fit=crop\", itemCount: 42 },\n  { id: \"5\", name: \"Fresh Made Food\", image: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=600&h=400&fit=crop\", itemCount: 28 },\n  { id: \"6\", name: \"Frozen\", image: \"https://images.unsplash.com/photo-1628773822990-202f6816fed8?w=600&h=400&fit=crop\", itemCount: 56 },\n  { id: \"7\", name: \"Fruits & Vegetables\", image: \"https://images.unsplash.com/photo-1540420773420-3366772f4999?w=600&h=400&fit=crop\", itemCount: 64 },\n  { id: \"8\", name: \"Meat\", image: \"https://images.unsplash.com/photo-1607623814075-e51df1bdc82f?w=600&h=400&fit=crop\", itemCount: 38 },\n  { id: \"9\", name: \"Personal & Home Care\", image: \"https://images.unsplash.com/photo-1556228720-195a672e8a03?w=600&h=400&fit=crop\", itemCount: 72 },\n  { id: \"10\", name: \"Pooja & Festival Items\", image: \"https://images.unsplash.com/photo-1603046891726-36bfd957e4f0?w=600&h=400&fit=crop\", itemCount: 45 },\n  { id: \"11\", name: \"Snacks\", image: \"https://images.unsplash.com/photo-1599490659213-e2b9527bd087?w=600&h=400&fit=crop\", itemCount: 58 },\n  { id: \"12\", name: \"Sports & Miscellaneous\", image: \"https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=600&h=400&fit=crop\", itemCount: 32 },\n];\n\n//todo: remove mock functionality\nconst products = [\n  { id: \"1\", name: \"Organic Bananas\", price: 2.99, image: \"https://images.unsplash.com/photo-1603833665858-e61d17a86224?w=400&h=400&fit=crop\", unit: \"lb\", stock: 25 },\n  { id: \"2\", name: \"Fresh Strawberries\", price: 4.99, image: \"https://images.unsplash.com/photo-1464965911861-746a04b4bca6?w=400&h=400&fit=crop\", unit: \"lb\", stock: 8 },\n  { id: \"3\", name: \"Roma Tomatoes\", price: 3.49, image: \"https://images.unsplash.com/photo-1546094096-0df4bcaaa337?w=400&h=400&fit=crop\", unit: \"lb\", stock: 18 },\n  { id: \"4\", name: \"Avocados\", price: 1.99, image: \"https://images.unsplash.com/photo-1523049673857-eb18f1d7b578?w=400&h=400&fit=crop\", unit: \"each\", stock: 30 },\n  { id: \"5\", name: \"Fresh Broccoli\", price: 2.49, image: \"https://images.unsplash.com/photo-1459411621453-7b03977f4bfc?w=400&h=400&fit=crop\", unit: \"lb\", stock: 20 },\n  { id: \"6\", name: \"Blueberries\", price: 5.99, image: \"https://images.unsplash.com/photo-1498557850523-fd3d118b962e?w=400&h=400&fit=crop\", unit: \"pint\", stock: 15 },\n];\n\n//todo: remove mock functionality\nconst previouslyOrderedItems = [\n  { id: \"p1\", name: \"Whole Milk\", price: 4.49, image: \"https://images.unsplash.com/photo-1550583724-b2692b85b150?w=400&h=400&fit=crop\", unit: \"gal\", stock: 25 },\n  { id: \"p2\", name: \"Organic Bananas\", price: 2.99, image: \"https://images.unsplash.com/photo-1603833665858-e61d17a86224?w=400&h=400&fit=crop\", unit: \"lb\", stock: 25 },\n  { id: \"p3\", name: \"Brown Eggs\", price: 3.99, image: \"https://images.unsplash.com/photo-1582722872445-44dc5f7e3c8f?w=400&h=400&fit=crop\", unit: \"dozen\", stock: 30 },\n  { id: \"p4\", name: \"Fresh Bread\", price: 2.99, image: \"https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=400&fit=crop\", unit: \"loaf\", stock: 18 },\n  { id: \"p5\", name: \"Greek Yogurt\", price: 4.99, image: \"https://images.unsplash.com/photo-1488477181946-6428a0291777?w=400&h=400&fit=crop\", unit: \"32 oz\", stock: 22 },\n  { id: \"p6\", name: \"Orange Juice\", price: 3.49, image: \"https://images.unsplash.com/photo-1600271886742-f049cd451bba?w=400&h=400&fit=crop\", unit: \"64 oz\", stock: 28 },\n];\n\n//todo: remove mock functionality\nconst mockSubcategories = [\n  {\n    id: \"1\",\n    name: \"Leafy Greens\",\n    products: [\n      { id: \"p1\", name: \"Spinach\", price: 2.99, imageUrl: \"https://images.unsplash.com/photo-1576045057995-568f588f82fb?w=400&h=400&fit=crop\", unit: \"bunch\" },\n      { id: \"p2\", name: \"Lettuce\", price: 1.99, imageUrl: \"https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=400&h=400&fit=crop\", unit: \"head\" },\n    ],\n  },\n  {\n    id: \"2\",\n    name: \"Root Vegetables\",\n    products: [\n      { id: \"p3\", name: \"Carrots\", price: 2.49, imageUrl: \"https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400&h=400&fit=crop\", unit: \"lb\" },\n      { id: \"p4\", name: \"Potatoes\", price: 3.99, imageUrl: \"https://images.unsplash.com/photo-1518977676601-b53f82aba655?w=400&h=400&fit=crop\", unit: \"5 lb bag\" },\n    ],\n  },\n];\n\nexport default function CustomerHome() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\n  const previouslyOrderedRef = useRef<ProductCarouselHandle>(null);\n  const popularProductsRef = useRef<ProductCarouselHandle>(null);\n\n  const handleCategoryClick = (categoryId: string) => {\n    setSelectedCategoryId(categoryId);\n  };\n\n  const selectedCategory = categories.find((cat) => cat.id === selectedCategoryId);\n\n  if (selectedCategoryId && selectedCategory) {\n    return (\n      <CategoryDetail\n        categoryId={selectedCategoryId}\n        categoryName={selectedCategory.name}\n        subcategories={mockSubcategories}\n        onBack={() => setSelectedCategoryId(null)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b\">\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-2 text-sm text-muted-foreground\">\n            <MapPin className=\"h-4 w-4\" />\n            <span data-testid=\"text-service-location\">Dallas, TX - Delivery Available</span>\n          </div>\n          <h1 className=\"font-display font-bold text-2xl mb-4\">FreshCart</h1>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search for products...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        <PromoBanner banners={mockBanners} />\n\n        <section>\n          <h2 className=\"font-semibold text-lg mb-4\">Shop by Category</h2>\n          <div className=\"grid grid-cols-3 gap-3\">\n            {categories.map((category) => (\n              <CategoryCard\n                key={category.id}\n                {...category}\n                onClick={() => handleCategoryClick(category.id)}\n              />\n            ))}\n          </div>\n        </section>\n\n        <section>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"font-semibold text-lg\" data-testid=\"text-previously-ordered-title\">Previously Ordered</h2>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={() => previouslyOrderedRef.current?.scrollLeft()}\n                data-testid=\"button-previously-ordered-prev\"\n              >\n                <ChevronLeft />\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={() => previouslyOrderedRef.current?.scrollRight()}\n                data-testid=\"button-previously-ordered-next\"\n              >\n                <ChevronRight />\n              </Button>\n            </div>\n          </div>\n          <ProductCarousel ref={previouslyOrderedRef}>\n            {previouslyOrderedItems.map((product) => (\n              <div key={product.id} className=\"w-44 flex-shrink-0 snap-start\">\n                <ProductCard {...product} />\n              </div>\n            ))}\n          </ProductCarousel>\n        </section>\n\n        <section>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"font-semibold text-lg\" data-testid=\"text-popular-products-title\">Popular Products</h2>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={() => popularProductsRef.current?.scrollLeft()}\n                data-testid=\"button-popular-products-prev\"\n              >\n                <ChevronLeft />\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={() => popularProductsRef.current?.scrollRight()}\n                data-testid=\"button-popular-products-next\"\n              >\n                <ChevronRight />\n              </Button>\n            </div>\n          </div>\n          <ProductCarousel ref={popularProductsRef}>\n            {products.map((product) => (\n              <div key={product.id} className=\"w-44 flex-shrink-0 snap-start\">\n                <ProductCard {...product} />\n              </div>\n            ))}\n          </ProductCarousel>\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10469},"client/src/pages/CustomerNotifications.tsx":{"content":"import { NotificationItem } from \"@/components/NotificationItem\";\nimport { Button } from \"@/components/ui/button\";\n\n//todo: remove mock functionality\nconst notifications = [\n  {\n    id: \"1\",\n    type: \"delivery\" as const,\n    title: \"Driver is nearby\",\n    message: \"Your delivery driver will arrive in 15 minutes. Please be ready to receive your order.\",\n    time: \"5 min ago\",\n    isRead: false,\n  },\n  {\n    id: \"2\",\n    type: \"delivered\" as const,\n    title: \"Order delivered\",\n    message: \"Your order #12344 has been delivered successfully. Thank you for shopping with us!\",\n    time: \"2 hours ago\",\n    isRead: false,\n  },\n  {\n    id: \"3\",\n    type: \"promo\" as const,\n    title: \"Weekend Special Offers\",\n    message: \"Check out our amazing deals on fresh produce. Up to 50% off this weekend only!\",\n    time: \"1 day ago\",\n    isRead: true,\n  },\n  {\n    id: \"4\",\n    type: \"order\" as const,\n    title: \"Order confirmed\",\n    message: \"Your order #12345 has been confirmed and is being prepared for delivery.\",\n    time: \"2 days ago\",\n    isRead: true,\n  },\n];\n\nexport default function CustomerNotifications() {\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h1 className=\"font-display font-bold text-2xl\">Notifications</h1>\n          {unreadCount > 0 && (\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-mark-all-read\">\n              Mark all read\n            </Button>\n          )}\n        </div>\n        {unreadCount > 0 && (\n          <p className=\"text-sm text-muted-foreground\">\n            {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}\n          </p>\n        )}\n      </div>\n\n      <div className=\"divide-y\">\n        {notifications.map((notification) => (\n          <NotificationItem key={notification.id} {...notification} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2024},"client/src/pages/CustomerOrderDetail.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Check } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface OrderDetailProps {\n  orderId: string;\n  onBack: () => void;\n}\n\nconst mockOrderData = {\n  id: \"12345\",\n  status: \"Shipped\",\n  createdAt: \"2024-10-01T14:30:00\",\n  deliveryMode: \"2 hour delivery\",\n  deliveryAddress: \"123 Main St, Apt 4B, Dallas, TX 75201\",\n  items: [\n    { id: \"1\", name: \"Organic Bananas\", quantity: 2, price: 2.99 },\n    { id: \"2\", name: \"Fresh Strawberries\", quantity: 1, price: 4.99 },\n    { id: \"3\", name: \"Roma Tomatoes\", quantity: 1, price: 3.49 },\n  ],\n  subtotal: 14.46,\n  tax: 1.16,\n  total: 15.62,\n};\n\nconst statusSteps = [\n  { label: \"Order Placed\", key: \"Placed\" },\n  { label: \"Processing\", key: \"Processing\" },\n  { label: \"Shipped\", key: \"Shipped\" },\n  { label: \"Complete\", key: \"Complete\" },\n];\n\nexport default function CustomerOrderDetail({ orderId, onBack }: OrderDetailProps) {\n  const [order] = useState(mockOrderData);\n  \n  const currentStepIndex = statusSteps.findIndex(step => step.key === order.status);\n\n  const getStepStatus = (index: number) => {\n    if (index < currentStepIndex) return \"completed\";\n    if (index === currentStepIndex) return \"current\";\n    return \"pending\";\n  };\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            data-testid=\"button-back-to-orders\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"font-display font-bold text-2xl\" data-testid=\"text-order-id\">\n              Order #{order.id}\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {new Date(order.createdAt).toLocaleDateString(\"en-US\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n                hour: \"numeric\",\n                minute: \"2-digit\",\n              })}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"font-semibold text-lg\">Order Status</h2>\n            <Badge\n              variant={order.status === \"Complete\" ? \"default\" : \"secondary\"}\n              data-testid=\"badge-order-status\"\n            >\n              {order.status}\n            </Badge>\n          </div>\n\n          <div className=\"space-y-6\">\n            {statusSteps.map((step, index) => {\n              const status = getStepStatus(index);\n              const isLast = index === statusSteps.length - 1;\n\n              return (\n                <div key={step.key} className=\"relative\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"relative flex flex-col items-center\">\n                      <div\n                        className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${\n                          status === \"completed\"\n                            ? \"bg-primary border-primary text-primary-foreground\"\n                            : status === \"current\"\n                            ? \"bg-background border-primary text-primary\"\n                            : \"bg-background border-border text-muted-foreground\"\n                        }`}\n                        data-testid={`step-${step.key.toLowerCase()}`}\n                      >\n                        {status === \"completed\" ? (\n                          <Check className=\"h-5 w-5\" />\n                        ) : (\n                          <div className=\"w-2 h-2 rounded-full bg-current\" />\n                        )}\n                      </div>\n                      {!isLast && (\n                        <div\n                          className={`w-0.5 h-12 mt-1 ${\n                            status === \"completed\" ? \"bg-primary\" : \"bg-border\"\n                          }`}\n                        />\n                      )}\n                    </div>\n                    <div className=\"flex-1 pb-8\">\n                      <p\n                        className={`font-medium ${\n                          status === \"pending\" ? \"text-muted-foreground\" : \"\"\n                        }`}\n                      >\n                        {step.label}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"font-semibold text-lg mb-4\">Items</h2>\n          <div className=\"space-y-3\">\n            {order.items.map((item) => (\n              <div\n                key={item.id}\n                className=\"flex items-center justify-between\"\n                data-testid={`order-item-${item.id}`}\n              >\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">{item.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                </div>\n                <p className=\"font-semibold\">${(item.price * item.quantity).toFixed(2)}</p>\n              </div>\n            ))}\n            <Separator className=\"my-3\" />\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal</span>\n                <span>${order.subtotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Tax</span>\n                <span>${order.tax.toFixed(2)}</span>\n              </div>\n              <Separator className=\"my-2\" />\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total</span>\n                <span data-testid=\"text-order-total\">${order.total.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"font-semibold text-lg mb-3\">Delivery Information</h2>\n          <div className=\"space-y-2 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground\">Delivery Mode</p>\n              <p className=\"font-medium\">{order.deliveryMode}</p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">Address</p>\n              <p className=\"font-medium\" data-testid=\"text-delivery-address\">\n                {order.deliveryAddress}\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        <div className=\"flex gap-3\">\n          <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-reorder\">\n            Reorder\n          </Button>\n          <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-rate-order\">\n            Rate Order\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7182},"client/src/pages/CustomerOrders.tsx":{"content":"import { OrderCard } from \"@/components/OrderCard\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport CustomerOrderDetail from \"./CustomerOrderDetail\";\nimport { useState } from \"react\";\n\n//todo: remove mock functionality\nconst orders = [\n  {\n    id: \"1\",\n    orderNumber: \"12345\",\n    date: \"Mar 15, 2024 2:30 PM\",\n    status: \"Shipped\" as const,\n    itemCount: 8,\n    total: 45.99,\n  },\n  {\n    id: \"2\",\n    orderNumber: \"12344\",\n    date: \"Mar 12, 2024 1:15 PM\",\n    status: \"Complete\" as const,\n    itemCount: 12,\n    total: 67.50,\n  },\n  {\n    id: \"3\",\n    orderNumber: \"12343\",\n    date: \"Mar 10, 2024 11:45 AM\",\n    status: \"Complete\" as const,\n    itemCount: 6,\n    total: 32.99,\n  },\n  {\n    id: \"4\",\n    orderNumber: \"12342\",\n    date: \"Mar 8, 2024 3:20 PM\",\n    status: \"Processing\" as const,\n    itemCount: 5,\n    total: 28.75,\n  },\n];\n\nexport default function CustomerOrders() {\n  const [selectedOrderId, setSelectedOrderId] = useState<string | null>(null);\n\n  const currentOrders = orders.filter(o => o.status !== \"Complete\");\n  const pastOrders = orders.filter(o => o.status === \"Complete\");\n\n  const handleReorder = (orderId: string) => {\n    console.log(\"Reorder:\", orderId);\n  };\n\n  const handleRateOrder = (orderId: string) => {\n    console.log(\"Rate order:\", orderId);\n  };\n\n  if (selectedOrderId) {\n    return (\n      <CustomerOrderDetail\n        orderId={selectedOrderId}\n        onBack={() => setSelectedOrderId(null)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <h1 className=\"font-display font-bold text-2xl\">My Orders</h1>\n      </div>\n\n      <Tabs defaultValue=\"current\" className=\"p-4\">\n        <TabsList className=\"w-full\">\n          <TabsTrigger value=\"current\" className=\"flex-1\" data-testid=\"tab-current-orders\">\n            Current\n          </TabsTrigger>\n          <TabsTrigger value=\"past\" className=\"flex-1\" data-testid=\"tab-past-orders\">\n            Past Orders\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"current\" className=\"mt-4 space-y-4\">\n          {currentOrders.length > 0 ? (\n            currentOrders.map((order) => (\n              <OrderCard\n                key={order.id}\n                {...order}\n                onViewDetails={() => setSelectedOrderId(order.id)}\n                onReorder={() => handleReorder(order.id)}\n                onRateOrder={() => handleRateOrder(order.id)}\n              />\n            ))\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No current orders</p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"past\" className=\"mt-4 space-y-4\">\n          {pastOrders.map((order) => (\n            <OrderCard\n              key={order.id}\n              {...order}\n              onViewDetails={() => setSelectedOrderId(order.id)}\n              onReorder={() => handleReorder(order.id)}\n              onRateOrder={() => handleRateOrder(order.id)}\n            />\n          ))}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":3162},"client/src/pages/CustomerSpecials.tsx":{"content":"import { ProductCard } from \"@/components/ProductCard\";\nimport { Badge } from \"@/components/ui/badge\";\n\n//todo: remove mock functionality\nconst specialProducts = [\n  { id: \"1\", name: \"Organic Bananas\", price: 1.99, originalPrice: 2.99, image: \"https://images.unsplash.com/photo-1603833665858-e61d17a86224?w=400&h=400&fit=crop\", unit: \"lb\", stock: 25, discount: \"33% OFF\" },\n  { id: \"2\", name: \"Fresh Strawberries\", price: 3.49, originalPrice: 4.99, image: \"https://images.unsplash.com/photo-1464965911861-746a04b4bca6?w=400&h=400&fit=crop\", unit: \"lb\", stock: 8, discount: \"30% OFF\" },\n  { id: \"3\", name: \"Whole Milk Gallon\", price: 2.99, originalPrice: 4.49, image: \"https://images.unsplash.com/photo-1550583724-b2692b85b150?w=400&h=400&fit=crop\", unit: \"gal\", stock: 15, discount: \"33% OFF\" },\n  { id: \"4\", name: \"Fresh Salmon Fillet\", price: 8.99, originalPrice: 12.99, image: \"https://images.unsplash.com/photo-1574781330855-d0db8cc6a79c?w=400&h=400&fit=crop\", unit: \"lb\", stock: 10, discount: \"31% OFF\" },\n];\n\nexport default function CustomerSpecials() {\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <h1 className=\"font-display font-bold text-2xl mb-2\">Special Offers</h1>\n        <p className=\"text-sm text-muted-foreground\">Limited time deals on fresh products</p>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"bg-chart-2/10 border border-chart-2/20 rounded-lg p-4 mb-6\">\n          <h2 className=\"font-semibold text-chart-2 mb-1\">Weekend Sale!</h2>\n          <p className=\"text-sm text-muted-foreground\">Save up to 50% on selected items. Offer ends Sunday midnight.</p>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          {specialProducts.map((product) => (\n            <div key={product.id} className=\"relative\">\n              <Badge className=\"absolute -top-2 left-2 z-10 bg-chart-2 text-white\">\n                {product.discount}\n              </Badge>\n              <ProductCard {...product} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2099},"client/src/pages/CustomerWishlist.tsx":{"content":"import { ProductCard } from \"@/components/ProductCard\";\nimport { Heart } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst mockWishlistItems = [\n  { id: \"1\", name: \"Butter Indian [Salted] Amul – 200 gms\", price: 4.99, image: \"https://images.unsplash.com/photo-1589985270826-4b7bb135bc9d?w=400&h=400&fit=crop\", unit: \"200 gms\", stock: 15 },\n  { id: \"2\", name: \"Cheese Spread Spicy Garlic\", price: 5.49, image: \"https://images.unsplash.com/photo-1486297678162-eb2a19b0a32d?w=400&h=400&fit=crop\", unit: \"250 gms\", stock: 8 },\n  { id: \"3\", name: \"Desi Besan Laxmi 4 lbs\", price: 8.99, image: \"https://images.unsplash.com/photo-1596797882870-8c33deeac224?w=400&h=400&fit=crop\", unit: \"4 lbs\", stock: 20 },\n];\n\nexport default function CustomerWishlist() {\n  const [wishlistItems, setWishlistItems] = useState(mockWishlistItems);\n\n  const handleRemoveFromWishlist = (id: string) => {\n    setWishlistItems(items => items.filter(item => item.id !== id));\n  };\n\n  const handleAddToCart = (id: string, quantity: number) => {\n    console.log(\"Add to cart:\", id, quantity);\n  };\n\n  return (\n    <div className=\"pb-20\">\n      <div className=\"sticky top-0 bg-background z-10 border-b p-4\">\n        <h1 className=\"font-display font-bold text-2xl\" data-testid=\"text-wishlist-title\">\n          Wishlist\n        </h1>\n        {wishlistItems.length > 0 && (\n          <p className=\"text-sm text-muted-foreground\">{wishlistItems.length} items</p>\n        )}\n      </div>\n\n      {wishlistItems.length > 0 ? (\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            {wishlistItems.map((item) => (\n              <ProductCard\n                key={item.id}\n                {...item}\n                onAddToCart={handleAddToCart}\n                onWishlistToggle={handleRemoveFromWishlist}\n                isInWishlist={true}\n              />\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"flex flex-col items-center justify-center py-20 px-4\">\n          <Heart className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground mb-4\" data-testid=\"text-empty-wishlist\">\n            Your wishlist is empty\n          </p>\n          <p className=\"text-sm text-muted-foreground text-center\">\n            Add items to your wishlist by tapping the heart icon on products\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2414},"client/src/pages/DriverDashboard.tsx":{"content":"import { DeliveryMap } from \"@/components/DeliveryMap\";\nimport { DeliveryCard } from \"@/components/DeliveryCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { Menu } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\n\n//todo: remove mock functionality\nconst initialDeliveries = [\n  {\n    id: \"1\",\n    orderNumber: \"12345\",\n    customerName: \"John Doe\",\n    customerPhone: \"+1 (555) 123-4567\",\n    address: \"123 Main St, Apt 4B, Dallas, TX 75201\",\n    itemCount: 8,\n    items: [\n      { id: \"1\", name: \"Organic Bananas\", quantity: 2, price: 5.98 },\n      { id: \"2\", name: \"Fresh Strawberries\", quantity: 1, price: 4.99 },\n      { id: \"3\", name: \"Roma Tomatoes\", quantity: 3, price: 10.47 },\n      { id: \"4\", name: \"Avocados\", quantity: 4, price: 7.96 },\n      { id: \"5\", name: \"Whole Milk\", quantity: 1, price: 3.99 },\n    ],\n    scheduledTime: \"2:00 PM - 3:00 PM\",\n    status: \"pending\" as const,\n  },\n  {\n    id: \"2\",\n    orderNumber: \"12346\",\n    customerName: \"Jane Smith\",\n    customerPhone: \"+1 (555) 987-6543\",\n    address: \"456 Oak Ave, Dallas, TX 75202\",\n    itemCount: 5,\n    items: [\n      { id: \"1\", name: \"Greek Yogurt\", quantity: 2, price: 7.98 },\n      { id: \"2\", name: \"Fresh Salmon\", quantity: 1, price: 12.99 },\n      { id: \"3\", name: \"Mixed Greens\", quantity: 1, price: 3.49 },\n      { id: \"4\", name: \"Sourdough Bread\", quantity: 1, price: 5.99 },\n    ],\n    scheduledTime: \"3:00 PM - 4:00 PM\",\n    status: \"pending\" as const,\n  },\n];\n\nexport default function DriverDashboard() {\n  const [deliveries, setDeliveries] = useState(initialDeliveries);\n\n  const handleStatusChange = (id: string, newStatus: string) => {\n    setDeliveries(deliveries.map(d => \n      d.id === id ? { ...d, status: newStatus as any } : d\n    ));\n    console.log(`Delivery ${id} status changed to ${newStatus}`);\n  };\n\n  const handleTakePhoto = () => {\n    console.log(\"Opening camera for proof of delivery\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"sticky top-0 bg-background z-10 border-b\">\n        <div className=\"p-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-menu\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"font-display font-bold text-xl\">Driver Dashboard</h1>\n              <p className=\"text-sm text-muted-foreground\">{deliveries.length} deliveries today</p>\n            </div>\n          </div>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <DeliveryMap \n          deliveryCount={deliveries.length}\n          onSetStartLocation={() => console.log(\"Setting start location\")}\n        />\n\n        <div>\n          <h2 className=\"font-semibold text-lg mb-4\">Today's Deliveries</h2>\n          <div className=\"space-y-4\">\n            {deliveries.map((delivery) => (\n              <DeliveryCard\n                key={delivery.id}\n                {...delivery}\n                onStatusChange={(status) => handleStatusChange(delivery.id, status)}\n                onTakePhoto={handleTakePhoto}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3336},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CartItem.tsx":{"content":"import { CartItem } from \"../CartItem\";\n\nexport default function CartItemExample() {\n  return (\n    <div className=\"p-4 max-w-md\">\n      <CartItem\n        id=\"1\"\n        name=\"Fresh Strawberries\"\n        price={4.99}\n        quantity={2}\n        image=\"https://images.unsplash.com/photo-1464965911861-746a04b4bca6?w=400&h=400&fit=crop\"\n        unit=\"lb\"\n        onIncrease={() => console.log(\"Increase\")}\n        onDecrease={() => console.log(\"Decrease\")}\n        onRemove={() => console.log(\"Remove\")}\n      />\n    </div>\n  );\n}\n","size_bytes":530},"client/src/components/examples/CategoryCard.tsx":{"content":"import { CategoryCard } from \"../CategoryCard\";\n\nexport default function CategoryCardExample() {\n  return (\n    <div className=\"p-4 max-w-sm\">\n      <CategoryCard\n        id=\"1\"\n        name=\"Fresh Vegetables\"\n        image=\"https://images.unsplash.com/photo-1540420773420-3366772f4999?w=600&h=400&fit=crop\"\n        itemCount={48}\n      />\n    </div>\n  );\n}\n","size_bytes":358},"client/src/components/examples/CustomerBottomNav.tsx":{"content":"import { CustomerBottomNav } from \"../CustomerBottomNav\";\nimport { useState } from \"react\";\n\nexport default function CustomerBottomNavExample() {\n  const [activeTab, setActiveTab] = useState(\"home\");\n\n  return (\n    <div className=\"h-20\">\n      <CustomerBottomNav\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        cartCount={3}\n        notificationCount={2}\n      />\n    </div>\n  );\n}\n","size_bytes":408},"client/src/components/examples/DeliveryCard.tsx":{"content":"import { DeliveryCard } from \"../DeliveryCard\";\nimport { useState } from \"react\";\n\nexport default function DeliveryCardExample() {\n  const [status, setStatus] = useState<\"pending\" | \"in_progress\" | \"delivered\">(\"pending\");\n\n  return (\n    <div className=\"p-4 max-w-md\">\n      <DeliveryCard\n        id=\"1\"\n        orderNumber=\"12345\"\n        customerName=\"John Doe\"\n        customerPhone=\"+1 (555) 123-4567\"\n        address=\"123 Main St, Apt 4B, Dallas, TX 75201\"\n        itemCount={5}\n        items={[\n          { id: \"1\", name: \"Organic Bananas\", quantity: 2, price: 5.98 },\n          { id: \"2\", name: \"Fresh Strawberries\", quantity: 1, price: 4.99 },\n          { id: \"3\", name: \"Roma Tomatoes\", quantity: 3, price: 10.47 },\n          { id: \"4\", name: \"Avocados\", quantity: 4, price: 7.96 },\n          { id: \"5\", name: \"Whole Milk\", quantity: 1, price: 3.99 },\n        ]}\n        scheduledTime=\"2:00 PM - 3:00 PM\"\n        status={status}\n        onStatusChange={(newStatus) => setStatus(newStatus as any)}\n        onTakePhoto={() => console.log(\"Taking photo\")}\n      />\n    </div>\n  );\n}\n","size_bytes":1090},"client/src/components/examples/DeliveryMap.tsx":{"content":"import { DeliveryMap } from \"../DeliveryMap\";\n\nexport default function DeliveryMapExample() {\n  return (\n    <div className=\"p-4\">\n      <DeliveryMap\n        deliveryCount={5}\n        onSetStartLocation={() => console.log(\"Setting start location\")}\n      />\n    </div>\n  );\n}\n","size_bytes":276},"client/src/components/examples/NotificationItem.tsx":{"content":"import { NotificationItem } from \"../NotificationItem\";\n\nexport default function NotificationItemExample() {\n  return (\n    <div className=\"max-w-md\">\n      <NotificationItem\n        id=\"1\"\n        type=\"delivery\"\n        title=\"Driver is nearby\"\n        message=\"Your delivery driver will arrive in 15 minutes. Please be ready to receive your order.\"\n        time=\"5 min ago\"\n        isRead={false}\n      />\n    </div>\n  );\n}\n","size_bytes":427},"client/src/components/examples/OrderCard.tsx":{"content":"import { OrderCard } from \"../OrderCard\";\n\nexport default function OrderCardExample() {\n  return (\n    <div className=\"p-4 max-w-md\">\n      <OrderCard\n        id=\"1\"\n        orderNumber=\"12345\"\n        date=\"Mar 15, 2024\"\n        status=\"out_for_delivery\"\n        itemCount={8}\n        total={45.99}\n        deliveryTime=\"2:00 PM - 3:00 PM\"\n        proofImage=\"/proof.jpg\"\n      />\n    </div>\n  );\n}\n","size_bytes":400},"client/src/components/examples/ProductCard.tsx":{"content":"import { ProductCard } from \"../ProductCard\";\n\nexport default function ProductCardExample() {\n  return (\n    <div className=\"p-4 max-w-sm\">\n      <ProductCard\n        id=\"1\"\n        name=\"Organic Bananas\"\n        price={2.99}\n        image=\"https://images.unsplash.com/photo-1603833665858-e61d17a86224?w=400&h=400&fit=crop\"\n        unit=\"lb\"\n        stock={25}\n      />\n    </div>\n  );\n}\n","size_bytes":388},"client/src/components/examples/PromoBanner.tsx":{"content":"import { PromoBanner } from \"../PromoBanner\";\nimport type { SpecialBanner } from \"@shared/schema\";\n\nconst mockBanners: SpecialBanner[] = [\n  {\n    id: \"1\",\n    title: \"50% OFF Fresh Produce\",\n    imageUrl: \"https://images.unsplash.com/photo-1542838132-92c53300491e?w=800&h=400&fit=crop\",\n    linkUrl: \"/specials/produce\",\n    sortOrder: 0,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    title: \"Weekend Special: Fresh Meat\",\n    imageUrl: \"https://images.unsplash.com/photo-1607623814075-e51df1bdc82f?w=800&h=400&fit=crop\",\n    linkUrl: \"/specials/meat\",\n    sortOrder: 1,\n    isActive: true,\n  },\n];\n\nexport default function PromoBannerExample() {\n  return (\n    <div className=\"p-4\">\n      <PromoBanner\n        banners={mockBanners}\n        onBannerClick={(banner) => console.log(\"Clicked:\", banner)}\n      />\n    </div>\n  );\n}\n","size_bytes":829},"client/src/components/examples/RoleSelector.tsx":{"content":"import { RoleSelector } from \"../RoleSelector\";\nimport { useState } from \"react\";\n\nexport default function RoleSelectorExample() {\n  const [role, setRole] = useState(\"customer\");\n\n  return (\n    <div className=\"p-20\">\n      <RoleSelector role={role} onRoleChange={setRole} />\n    </div>\n  );\n}\n","size_bytes":294},"client/src/components/examples/StatsCard.tsx":{"content":"import { StatsCard } from \"../StatsCard\";\nimport { DollarSign } from \"lucide-react\";\n\nexport default function StatsCardExample() {\n  return (\n    <div className=\"p-4 max-w-sm\">\n      <StatsCard\n        title=\"Total Revenue\"\n        value=\"$12,450\"\n        icon={DollarSign}\n        trend=\"+12.5% from last month\"\n        trendUp={true}\n      />\n    </div>\n  );\n}\n","size_bytes":363},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":122},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ProductCarousel.tsx":{"content":"import { useRef, useState, useEffect, useImperativeHandle, forwardRef } from \"react\";\n\ninterface ProductCarouselProps {\n  children: React.ReactNode;\n}\n\nexport interface ProductCarouselHandle {\n  scrollLeft: () => void;\n  scrollRight: () => void;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n}\n\nexport const ProductCarousel = forwardRef<ProductCarouselHandle, ProductCarouselProps>(\n  ({ children }, ref) => {\n    const scrollContainerRef = useRef<HTMLDivElement>(null);\n    const [canScrollLeft, setCanScrollLeft] = useState(false);\n    const [canScrollRight, setCanScrollRight] = useState(false);\n\n    const checkScrollability = () => {\n      const container = scrollContainerRef.current;\n      if (!container) return;\n\n      setCanScrollLeft(container.scrollLeft > 0);\n      setCanScrollRight(\n        container.scrollLeft < container.scrollWidth - container.clientWidth - 1\n      );\n    };\n\n    useEffect(() => {\n      checkScrollability();\n      const container = scrollContainerRef.current;\n      if (container) {\n        container.addEventListener(\"scroll\", checkScrollability);\n        window.addEventListener(\"resize\", checkScrollability);\n        return () => {\n          container.removeEventListener(\"scroll\", checkScrollability);\n          window.removeEventListener(\"resize\", checkScrollability);\n        };\n      }\n    }, [children]);\n\n    const scroll = (direction: \"left\" | \"right\") => {\n      const container = scrollContainerRef.current;\n      if (!container) return;\n\n      const scrollAmount = 300;\n      const targetScroll =\n        direction === \"left\"\n          ? container.scrollLeft - scrollAmount\n          : container.scrollLeft + scrollAmount;\n\n      container.scrollTo({\n        left: targetScroll,\n        behavior: \"smooth\",\n      });\n    };\n\n    useImperativeHandle(ref, () => ({\n      scrollLeft: () => scroll(\"left\"),\n      scrollRight: () => scroll(\"right\"),\n      canScrollLeft,\n      canScrollRight,\n    }));\n\n    return (\n      <div\n        ref={scrollContainerRef}\n        className=\"flex gap-4 overflow-x-auto scrollbar-hide snap-x snap-mandatory -mx-4 px-4\"\n        style={{\n          scrollbarWidth: \"none\",\n          msOverflowStyle: \"none\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nProductCarousel.displayName = \"ProductCarousel\";\n","size_bytes":2308},"client/src/contexts/CartContext.tsx":{"content":"import { createContext, useContext, useState, type ReactNode } from \"react\";\n\nexport interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n  unit: string;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addToCart: (id: string, name: string, price: number, image: string, unit: string, quantity: number) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  removeFromCart: (id: string) => void;\n  getItemQuantity: (id: string) => number;\n  uniqueItemCount: number;\n  totalItems: number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([]);\n\n  const addToCart = (id: string, name: string, price: number, image: string, unit: string, quantity: number) => {\n    setItems(prevItems => {\n      const existingItem = prevItems.find(item => item.id === id);\n      \n      if (quantity <= 0) {\n        return prevItems.filter(item => item.id !== id);\n      }\n      \n      if (existingItem) {\n        return prevItems.map(item =>\n          item.id === id ? { ...item, quantity } : item\n        );\n      }\n      \n      return [...prevItems, { id, name, price, image, unit, quantity }];\n    });\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(id);\n    } else {\n      setItems(prevItems =>\n        prevItems.map(item =>\n          item.id === id ? { ...item, quantity } : item\n        )\n      );\n    }\n  };\n\n  const removeFromCart = (id: string) => {\n    setItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  const getItemQuantity = (id: string) => {\n    return items.find(item => item.id === id)?.quantity || 0;\n  };\n\n  const uniqueItemCount = items.length;\n  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n  return (\n    <CartContext.Provider\n      value={{\n        items,\n        addToCart,\n        updateQuantity,\n        removeFromCart,\n        getItemQuantity,\n        uniqueItemCount,\n        totalItems,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n","size_bytes":2377}},"version":1}